{"componentChunkName":"component---src-templates-single-post-js","path":"/create-python-executable-using-pyinstaller","result":{"data":{"markdownRemark":{"id":"e302a835-f5cb-5687-87bb-af63332e23be","html":"<h1>Introduction</h1>\n<p>Pyinstaller packages pythin applications and its dependencies into a stand-lone executables.</p>\n<blockquote>\n<p>Pyinstaller can be used across platforms. However, the bundled executable can only be used under the environment it be created. i.e. If you want to create .exe file you need to run pyinstaller under Windows environment.</p>\n</blockquote>\n<h1>Installation</h1>\n<p>Pyinstaller can be installed through pip:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> pyinstaller</code></pre></div>\n<h3>Requirements:</h3>\n<ul>\n<li>\n<p>Python:</p>\n<ul>\n<li>2.7 or 3.5-3.7</li>\n</ul>\n</li>\n<li>\n<p>Windows:</p>\n<ul>\n<li>Windows XP or newer</li>\n</ul>\n</li>\n<li>\n<p>Mac OS:</p>\n<ul>\n<li>Mac OS X 10.7(Lion) or newer</li>\n</ul>\n</li>\n</ul>\n<h1>Getting Started</h1>\n<p>Go to your program's directory and run:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pyinstaller pythonScriptName.py</code></pre></div>\n<p>By default, a folder with all dependencies and executables will be created in a subdirectory called <code class=\"language-text\">dist</code>.</p>\n<h3>Bundling to a single executable</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pyinstaller -F pythonScriptName.py</code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pyinstaller --onefile pythonScriptName.py</code></pre></div>\n<p>Startup time of the single executable is longer than the folder.</p>\n<h1>Questions</h1>\n<h2>Relative path issue</h2>\n<p>When file is executed under environment without python or other environments instead of the local machine, the icon is usually not displayed correctly. It is because the file path the executable use has changed.</p>\n<h3>Solutions:</h3>\n<ul>\n<li>\n<h4>Using absolute file path</h4>\n</li>\n<li>\n<h4>Freeze file path</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n\nconfig_name <span class=\"token operator\">=</span> <span class=\"token string\">'myapp.cfg'</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">app_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#return the base application path</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">,</span> <span class=\"token string\">'frozen'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>executable<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> __file__<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span>\n\nconfig_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>application_path<span class=\"token punctuation\">,</span> config_name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>app_path() return the execute path of the application.</p>\n</li>\n</ul>\n<br>\n<h2>Size of executable is too large</h2>\n<ul>\n<li>\n<h4>Use <code class=\"language-text\">from ... import ...</code> instead of <code class=\"language-text\">import</code></h4>\n<p>The whole package will be bundled if using <code class=\"language-text\">import</code>. Bundled the APIs that you only need.</p>\n</li>\n<li>\n<h4>Pipenv</h4>\n<p>When using Anaconda, as Anaconda has lots of built-in libraries, it will bundle many unnecessary modules. To get rid of them, we can use a clean environment and here I choose <strong><em>pipenv</em></strong>.</p>\n<p>Pipenv is a tool to create and manages a virtualenv for the projects.</p>\n<p>Install pipenv</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> pipenv</code></pre></div>\n<p>Go to the directory of our project to create a virtual environment.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv <span class=\"token function\">install</span></code></pre></div>\n<p>Activate the project's virtualenv</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv shell</code></pre></div>\n<p>Install the necessary dependencies</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> pyinstaller\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Bundle under this virtual environment</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pyinstaller pythonScriptName.py</code></pre></div>\n<p>To delete the virtual environment, go to the project's directory and run <code class=\"language-text\">pipenv --rm</code></p>\n</li>\n</ul>","frontmatter":{"title":"Create Python Executable using Pyinstaller","author":"Zach Zeng","date":"Jul 23rd 2020","tags":["python","code"],"image":null}}},"pageContext":{"slug":"create-python-executable-using-pyinstaller"}},"staticQueryHashes":["3667468360","545710448","63159454"]}